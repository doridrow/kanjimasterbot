import telebot
from telebot import types
import data
import os

help_message = '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Kanji Master! üå∏ –û–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —è–ø–æ–Ω—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –∏ —Å–ª–æ–≤, 
—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏! –ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å –¥–≤–∞ —Ä–µ–∂–∏–º–∞: –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ \n\n 
1Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤: –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–¥–∑–∏". –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—ã–π 
–∫–∞–Ω–¥–∑–∏ –∏–∑ –±–∞–∑—ã, –∞ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —á—Ç–µ–Ω–∏—è, –ø–æ—Ä—è–¥–æ–∫ —á–µ—Ä—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Å–ª–æ–≤–∞. \n\n 2Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ 
—Å–ª–æ–≤: –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ". –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞ –º–æ–∂–Ω–æ —Ç—Ä–µ–º—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ ‚Äî –ø–æ 
—Å–∞–º–æ–º—É —Å–ª–æ–≤—É –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ —á—Ç–µ–Ω–∏—é –∏–ª–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É ‚Äî –∫–∞–∫ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ. \n\n–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å 
–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –ø–æ —É—Ä–æ–≤–Ω—è–º ‚Äî N5, N4 –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. –ê, –º–æ–∂–µ—Ç, —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ ‚ò∫Ô∏è  \n\n –û–±–æ –≤—Å–µ—Ö –æ—à–∏–±–∫–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±–æ—Ç–æ–º, —Å–æ–æ–±—â–∞–π—Ç–µ 
–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ: @dorichan'''

if __name__ == '__main__':
    TOKEN = str(os.environ['TOKEN'])
    bot = telebot.TeleBot(TOKEN, skip_pending=True)
    start_markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    exit_btn = types.KeyboardButton('–í—ã—Ö–æ–¥')
    start_markup_btn1 = types.KeyboardButton('–ù–∞—á–∞—Ç—å')
    start_markup_btn2 = types.KeyboardButton('–ü–æ–º–æ—â—å')
    start_markup.add(start_markup_btn1, start_markup_btn2)

    exercise_markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    choose_markup_btn1 = types.KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–¥–∑–∏')
    choose_markup_btn2 = types.KeyboardButton('–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ')
    exercise_markup.add(choose_markup_btn1, choose_markup_btn2, exit_btn)

    words_learning_mod_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    words_learning_start_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    words_learning_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    words_learning_markup_btn5 = types.KeyboardButton('–°–Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–æ')
    words_learning_markup_btn6 = types.KeyboardButton('–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥')
    words_learning_markup_btn7 = types.KeyboardButton('–°–Ω–∞—á–∞–ª–∞ —á—Ç–µ–Ω–∏–µ')
    words_learning_markup_btn1 = types.KeyboardButton('–ß—Ç–µ–Ω–∏–µ')
    words_learning_markup_btn2 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥')
    words_learning_markup_btn3 = types.KeyboardButton('–î–∞–ª—å—à–µ')
    words_learning_markup_btn8 = types.KeyboardButton('–°–ª–æ–≤–æ')

    words_learning_mod_markup.add(words_learning_markup_btn5, words_learning_markup_btn6, words_learning_markup_btn7,
                                  exit_btn)
    words_learning_start_markup.add(words_learning_markup_btn3, exit_btn)
    words_learning_markup.add(words_learning_markup_btn8, words_learning_markup_btn1, words_learning_markup_btn2,
                              words_learning_markup_btn3,
                              exit_btn)

    kanji_learning_start_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    kanji_learning_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    kanji_learning_markup_btn1 = types.KeyboardButton('–ù–æ–≤—ã–π –∫–∞–Ω–¥–∑–∏')
    kanji_learning_markup_btn2 = types.KeyboardButton('–ß—Ç–µ–Ω–∏–µ')
    kanji_learning_markup_btn3 = types.KeyboardButton('–°–ª–æ–≤–∞ —Å —ç—Ç–∏–º –∫–∞–Ω–¥–∑–∏')
    kanji_learning_markup_btn5 = types.KeyboardButton('–ü–æ—Ä—è–¥–æ–∫ —á–µ—Ä—Ç')

    kanji_learning_start_markup.add(kanji_learning_markup_btn1, exit_btn)
    kanji_learning_markup.add(kanji_learning_markup_btn2, kanji_learning_markup_btn3, kanji_learning_markup_btn5,
                              kanji_learning_markup_btn1, exit_btn)


    @bot.message_handler(commands=['start', 'go'])
    def start_handler(message):
        chat_id = message.chat.id
        if chat_id in data.users:
            msg = bot.send_message(message.chat.id, '–ß–µ–º –∑–∞–π–º–µ–º—Å—è?', reply_markup=exercise_markup)
            bot.register_next_step_handler(msg, choose_exercise)
        else:
            data.add_user(chat_id)
            msg = bot.send_message(message.chat.id, help_message, reply_markup=exercise_markup)
            bot.register_next_step_handler(msg, choose_exercise)


    @bot.message_handler(content_types=['text'])
    def start_handler(message):
        chat_id = message.chat.id
        text = message.text

        if not chat_id in data.users:
            data.add_user(chat_id)
        # print(data.get_user(chat_id).isTalking)
        if data.get_user(chat_id).isTalking == 1:
            return
        else:
            data.get_user(chat_id).isTalking = 1
        if text == '–í—ã—Ö–æ–¥':
            bot.send_message(chat_id, '–î–æ –≤—Å—Ç—Ä–µ—á–∏!', reply_markup=start_markup)
            data.get_user(chat_id).isTalking = 0
            return
        elif text == '–ü–æ–º–æ—â—å':
            msg = bot.send_message(chat_id, help_message, reply_markup=exercise_markup)
            bot.register_next_step_handler(msg, choose_exercise)
            data.get_user(chat_id).isTalking = 0
            return
        else:
            msg = bot.send_message(chat_id, '–ß–µ–º –∑–∞–π–º–µ–º—Å—è?', reply_markup=exercise_markup)
            bot.register_next_step_handler(msg, choose_exercise)
            data.get_user(chat_id).isTalking = 0
            # print(message.text, data.get_user(chat_id).isTalking)


    def choose_exercise(message):
        chat_id = message.chat.id
        text = message.text
        if data.get_user(chat_id).isTalking == 1:
            return
        else:
            data.get_user(chat_id).isTalking = 1
        if text == '–°–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–¥–∑–∏':
            msg = bot.send_message(chat_id, '–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª, –Ω–∞—á–∏–Ω–∞–µ–º!', reply_markup=kanji_learning_start_markup)
            bot.register_next_step_handler(msg, kanji_learning)
            data.get_user(chat_id).isTalking = 0
        elif text == '–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ':
            msg = bot.send_message(chat_id, '–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞?', reply_markup=words_learning_mod_markup)
            bot.register_next_step_handler(msg, words_learning_mod)
            data.get_user(chat_id).isTalking = 0
        elif text == '–í—ã—Ö–æ–¥':
            bot.send_message(message.chat.id, '–î–æ –≤—Å—Ç—Ä–µ—á–∏!', reply_markup=start_markup)
            data.get_user(chat_id).isTalking = 0
        else:
            msg = bot.send_message(chat_id, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!',
                                   reply_markup=exercise_markup)
            bot.register_next_step_handler(msg, choose_exercise)
            data.get_user(chat_id).isTalking = 0


    def kanji_learning(message):

        chat_id = message.chat.id
        text = message.text
        if data.get_user(chat_id).isTalking == 1:
            return
        else:
            data.get_user(chat_id).isTalking = 1

        if text == '–í—ã—Ö–æ–¥':
            exit_to_menu(chat_id)
        elif text == '–ü–æ—Ä—è–¥–æ–∫ —á–µ—Ä—Ç':
            txt = data.kanji_handler(text, chat_id)
            msg = bot.send_video(chat_id, txt, reply_markup=kanji_learning_markup)
            bot.register_next_step_handler(msg, kanji_learning)
            data.get_user(chat_id).isTalking = 0
        else:
            txt = data.kanji_handler(text, chat_id)
            if txt == 'Error':
                msg = bot.send_message(chat_id, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!',
                                       reply_markup=kanji_learning_markup)
                bot.register_next_step_handler(msg, kanji_learning)
                data.get_user(chat_id).isTalking = 0
                return
            msg = bot.send_message(chat_id, txt,
                                   reply_markup=kanji_learning_markup)
            bot.register_next_step_handler(msg, kanji_learning)
            data.get_user(chat_id).isTalking = 0


    def words_learning_mod(message):
        chat_id = message.chat.id
        text = message.text
        if data.get_user(chat_id).isTalking == 1:
            return
        else:
            data.get_user(chat_id).isTalking = 1
        if text == '–°–Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–æ':
            msg = bot.send_message(chat_id, '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏',
                                   reply_markup=words_learning_start_markup)
            data.get_user(chat_id).change_word_mod('by_original')
            bot.register_next_step_handler(msg, words_learning)
            data.get_user(chat_id).isTalking = 0
        elif text == '–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥':
            msg = bot.send_message(chat_id, '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏',
                                   reply_markup=words_learning_start_markup)
            data.get_user(chat_id).change_word_mod('by_translation')
            bot.register_next_step_handler(msg, words_learning)
            data.get_user(chat_id).isTalking = 0
        elif text == '–°–Ω–∞—á–∞–ª–∞ —á—Ç–µ–Ω–∏–µ':
            msg = bot.send_message(chat_id, '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏',
                                   reply_markup=words_learning_start_markup)
            data.get_user(chat_id).change_word_mod('by_reading')
            bot.register_next_step_handler(msg, words_learning)
            data.get_user(chat_id).isTalking = 0
        elif text == '–í—ã—Ö–æ–¥':
            exit_to_menu(chat_id)
        else:
            msg = bot.send_message(chat_id, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!',
                                   reply_markup=words_learning_mod_markup)
            bot.register_next_step_handler(msg, words_learning_mod)
            data.get_user(chat_id).isTalking = 0


    def words_learning(message):
        chat_id = message.chat.id
        text = message.text

        if data.get_user(chat_id).isTalking == 1:
            return
        else:
            data.get_user(chat_id).isTalking = 1
        if text == '–í—ã—Ö–æ–¥':
            exit_to_menu(chat_id)

        else:
            txt = data.word_handler(text, chat_id)
            if txt == 'Error':
                msg = bot.send_message(chat_id, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!',
                                       reply_markup=words_learning_markup)
                bot.register_next_step_handler(msg, words_learning)
                data.get_user(chat_id).isTalking = 0
                return
            msg = bot.send_message(chat_id, txt,
                                   reply_markup=words_learning_markup)
            bot.register_next_step_handler(msg, words_learning)
            data.get_user(chat_id).isTalking = 0


    def exit_to_menu(chat_id):
        data.get_user(chat_id).isTalking = 0
        msg = bot.send_message(chat_id, '–•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?', reply_markup=exercise_markup)
        bot.register_next_step_handler(msg, choose_exercise)


    bot.polling()
